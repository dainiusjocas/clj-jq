name: Create a release of clj-jq

on:
  push:
    tags:
      - 'v*'

jobs:
  create-gh-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.5.3

      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          name: Release ${{ env.RELEASE_VERSION }}
          body: |
            See [CHANGELOG.md](https://github.com/dainiusjocas/clj-jq/blob/main/CHANGELOG.md) for details.
            If you are using macOS Catalina and later you may need to remove the quarantine attribute from the bits before you can use them. To do this, run the following:
            ```
            sudo xattr -r -d com.apple.quarantine clj-jq
            ```
          draft: true

  compile-native-image-and-release-artifacts:
    needs: create-gh-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
        include:
          - os: ubuntu-latest
            platform: linux
            gu-binary: gu
            arch: 'amd64'
          - os: macos-latest
            platform: macos
            gu-binary: gu
            arch: 'amd64'

    steps:
      - uses: actions/checkout@v3.5.3

      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Setup Graalvm
        id: setup-graalvm
        uses: DeLaGuardo/setup-graalvm@master
        with:
          # GraalVM version, no pattern syntax available atm
          graalvm: '22.3.2'
          # Java version, optional, defaults to 'java8'. Available options are 'java8' and 'java11'.
          java: 'java17'
          # Architecture flag, optional, defaults to 'amd64'. Available options are 'amd64' and 'aarch64'. Later is available only for linux runners.
          arch: ${{ matrix.arch }}

      - name: Install native-image component
        run: |
          ${{ matrix.gu-binary }} install native-image

      - name: Install clojure tools-deps
        uses: DeLaGuardo/setup-clojure@master
        with:
          tools-deps: 1.11.1.1347

      - name: Compile uberjar
        run: |
          clojure -T:build clean
          clojure -T:build uber

      - name: Upload uberjar to the release when on linux
        if: ${{ matrix.platform == 'linux' }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          name: Release ${{ env.RELEASE_VERSION }}
          draft: true
          files: |
            target/clj-jq-*-standalone.jar

      - name: Compile native image
        run: |
          CLJ_JQ_STATIC=false bash script/compile
          zip clj-jq-${RELEASE_VERSION#v*}-${{ matrix.platform }}-${{ matrix.arch }}.zip clj-jq

      - name: Setup MUSL and add relevant env variables on linux
        if: ${{ matrix.platform == 'linux' }}
        run: |
          bash script/setup-musl
          echo "MUSL_DIR=${HOME}/.musl" >> $GITHUB_ENV
          echo "PATH=$PATH:${MUSL_DIR}/bin" >> $GITHUB_ENV

#      - name: Compile static native-image with MUSL on linux
#        if: ${{ matrix.platform == 'linux' }}
#        run: |
#          PATH=$PATH:${MUSL_DIR}/bin CLJ_JQ_STATIC=true CLJ_JQ_MUSL=true bash script/compile
#          zip clj-jq-${RELEASE_VERSION#v*}-${{ matrix.platform }}-${{ matrix.arch }}-static.zip clj-jq

      - name: Upload binaries to the release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          name: Release ${{ env.RELEASE_VERSION }}
          draft: true
          files: |
            clj-jq-*-${{ matrix.platform }}-${{ matrix.arch }}.zip
#            clj-jq-*-${{ matrix.platform }}-${{ matrix.arch }}-static.zip

  compile-windows-native-image:
    needs: create-gh-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-latest ]
        include:
          - os: windows-latest
            platform: windows
            arch: 'amd64'
    steps:
      - uses: actions/checkout@v3.5.3
        with:
          fetch-depth: '0'

      - name: Set env
        run: |
          echo ("RELEASE_VERSION=" + $env:GITHUB_REF.replace('refs/tags/', '')) >> $env:GITHUB_ENV

      - name: Prepare java
        uses: actions/setup-java@v3.11.0
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Install clojure tools-deps
        uses: DeLaGuardo/setup-clojure@master
        with:
          cli: 1.11.1.1347

      - name: Compile uberjar on windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          clojure -T:build uber
        shell: powershell

      - uses: ilammy/msvc-dev-cmd@v1.12.1
      - uses: microsoft/setup-msbuild@v1
      - name: Set env
        shell: powershell
        run: |
          echo ("CLJ_JQ_VERSION=" + $(cat resources/CLJ_JQ_VERSION)) >> $env:GITHUB_ENV

      - uses: ayltai/setup-graalvm@v1
        with:
          java-version: 17
          graalvm-version: 22.3.2
          native-image: true

      - name: Build native image
        run: |
          native-image -jar "target/clj-jq-$env:CLJ_JQ_VERSION-standalone.jar" -H:Name=clj-jq -H:+ReportExceptionStackTraces --initialize-at-build-time --verbose --no-fallback -J-Xmx8g
        shell: powershell

      - name: Zip executable
        shell: powershell
        run: |
          tar.exe -a -c -f clj-jq-$($env:RELEASE_VERSION.replace('v', ''))-${{ matrix.platform }}-${{ matrix.arch }}.zip clj-jq.exe

      - name: Upload windows binaries to the release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          name: Release ${{ env.RELEASE_VERSION }}
          draft: true
          files: |
            clj-jq-*-${{ matrix.platform }}-${{ matrix.arch }}.zip

  deploy-to-clojars:

    runs-on: ubuntu-latest

    needs: [create-gh-release, compile-windows-native-image, compile-native-image-and-release-artifacts]

    steps:
      - uses: actions/checkout@v3.5.3

      - name: Cache maven deps
        uses: actions/cache@v3.3.1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/deps.edn') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Prepare java
        uses: actions/setup-java@v3.11.0
        with:
          distribution: 'zulu'
          java-version: '11'

      - name: Install clojure tools-deps
        uses: DeLaGuardo/setup-clojure@11.0
        with:
          cli: 1.11.1.1347

      - name: Publish lib to Clojars
        run: |
          clojure -T:build jar
          clojure -X:deploy
        env:
          CLOJARS_USERNAME: ${{ secrets.CLOJARS_USERNAME }}
          CLOJARS_PASSWORD: ${{ secrets.CLOJARS_PASSWORD }}
